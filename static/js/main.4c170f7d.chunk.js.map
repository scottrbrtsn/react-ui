{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","createTable","table","i","max","children","j","calc","calc2","calc3","push","key","playNoteButton","offset","className","onMouseEnter","playNote","createPitchUpButton","handleUp","createPitchDownButton","handleDown","bind","noteOne","noteTwo","noteThree","revDamp","synth","PolySynth","toMaster","rev","Freeverb","connect","dampening","value","con","Context","resume","this","updateSynth","val","triggerAttackRelease","React","Component","ReactDOM","render","document","getElementById","Boolean","window","location","hostname","match","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6RAOqBA,G,kBACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAsCRC,YAAc,WAIZ,IAHA,IAAIC,EAAQ,GAGHC,EAAI,EAAGA,EAAIC,GAASD,IAAK,CAGhC,IAFA,IAAIE,EAAW,GAENC,EAAI,EAAGA,EAAIF,GAASE,IAAK,CAChC,IAAIC,GAAQD,EAAGH,GAAJ,GACPK,EAPE,GAOYL,EAAIG,EAClBG,EARE,GAQYH,EAAIH,EAGnBG,GAAKF,IAASD,GAAKC,GACpBC,EAASK,KAAK,wBAAIC,IAAKR,EAAIG,GAAI,EAAKM,eAHzBR,IAGiDG,EAAKA,KACzDD,GAAKF,IAASD,GAAKC,GAC7BC,EAASK,KAAK,wBAAIC,IAAKR,EAAIG,GAAI,EAAKM,eALvBR,IAK+CK,EAAMA,KACxDN,GAAKC,IAASE,GAAKF,GAC3BC,EAASK,KAAK,wBAAIC,IAAKR,EAAIG,GAAI,EAAKM,eAPzBR,IAOiDI,EAAMA,KAElEH,EAASK,KAAK,wBAAIC,IAAKR,EAAIG,GAAI,EAAKM,eAAeT,EAAEG,KAIzDJ,EAAMQ,KAAK,wBAAIC,IAAKR,GAAIE,IAE1B,OAAOH,GAjEU,EAoEnBU,eAAiB,SAACC,GAChB,OACI,4BAAQC,UAAU,SAASC,aAAc,kBAAM,EAAKC,SAASH,OAtEhD,EAqFnBI,oBAAsB,WACpB,OACI,4BAAQF,aAAc,EAAKG,UAA3B,OAvFa,EA6FnBC,sBAAwB,WACtB,OACI,4BAAQJ,aAAc,EAAKK,YAA3B,SA7FJ,EAAKF,SAAW,EAAKA,SAASG,KAAd,gBAChB,EAAKD,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAKL,SAAW,EAAKA,SAASK,KAAd,gBAEhB,EAAKC,QAAU,MACf,EAAKC,QAAU,IACf,EAAKC,UAAY,OACjB,EAAKC,QAAU,GACf,EAAKC,OAAQ,IAAIC,aAAYC,WAE7B,EAAKC,KAAM,IAAIC,YAAWF,WAC1B,EAAKF,MAAMK,QAAQ,EAAKF,KACxB,EAAKA,IAAIG,UAAUC,MAAQ,EAAKR,QAEhC,EAAKS,IAAM,IAAIC,UAAQ,EAAKT,OAC5B,EAAKQ,IAAIE,SAjBQ,E,wEAqBjBC,KAAKC,YAAY,M,mCAIjBD,KAAKC,aAAa,M,kCAKRC,GACVF,KAAKZ,QAAUY,KAAKZ,QAAUc,EAAI,GAClCF,KAAKR,IAAIG,UAAUC,MAAQI,KAAKZ,QAEhCY,KAAKf,QAAUe,KAAKf,QAAUiB,EAC9BF,KAAKd,QAAUc,KAAKd,QAAUgB,EAC9BF,KAAKb,UAAYa,KAAKb,UAAYe,I,+BAwC3B1B,GAEO,KADdA,GAAkB,IAEhBwB,KAAKX,MAAMc,qBAAqB,CAACH,KAAKf,QAAUT,EAAQwB,KAAKd,QAAUV,EAAQwB,KAAKb,UAAYX,GAAS,GAEzGwB,KAAKX,MAAMc,qBAAqB,CAACH,KAAKf,QAASe,KAAKd,QAASc,KAAKb,WAAY,K,+BAsBhF,OACE,6BACE,+BACE,+BACGa,KAAKpC,qB,GA5GewC,IAAMC,YAqHvCC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SChH7BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNR,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBM,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4c170f7d.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { PolySynth } from \"tone\";\nimport { Freeverb } from \"tone\";\nimport { Context } from \"tone\";\nimport './App.css';\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleUp = this.handleUp.bind(this);\n    this.handleDown = this.handleDown.bind(this);\n    this.playNote = this.playNote.bind(this); \n\n    this.noteOne = 73.42;\n    this.noteTwo = 110;\n    this.noteThree = 146.83;\n    this.revDamp = 10\n    this.synth = new PolySynth().toMaster();\n\n    this.rev = new Freeverb().toMaster();\n    this.synth.connect(this.rev);\n    this.rev.dampening.value = this.revDamp;\n\n    this.con = new Context(this.synth);\n    this.con.resume();\n  }\n\n  handleUp() {\n    this.updateSynth(10);\n  }\n\n  handleDown() {\n    this.updateSynth(-10);\n  }\n\n\n\n  updateSynth(val){\n    this.revDamp = this.revDamp + val/10;\n    this.rev.dampening.value = this.revDamp;\n\n    this.noteOne = this.noteOne + val;\n    this.noteTwo = this.noteTwo + val;\n    this.noteThree = this.noteThree + val;\n  }\n\n  createTable = () => {\n    let table = []\n    let max = 20;\n    // Outer loop to create parent\n    for (let i = 0; i < max + 1; i++) {\n      let children = []\n      //Inner loop to create children\n      for (let j = 0; j < max + 1; j++) {\n        let calc = (j +i) % (max*2);\n        let calc2 = max - i + j;\n        let calc3 = max - j + i;\n        let adjust = max*max;\n\n        if(j <= max/2 && i <= max/2){\n          children.push(<td key={i + j}>{this.playNoteButton(adjust - calc*calc)}</td>)\n        } else if(j >= max/2 && i <= max/2){\n        children.push(<td key={i + j}>{this.playNoteButton(adjust - calc3*calc3)}</td>)\n        } else if(i >= max/2 && j <= max/2){\n          children.push(<td key={i + j}>{this.playNoteButton(adjust - calc2*calc2)}</td>)\n        } else {\n          children.push(<td key={i + j}>{this.playNoteButton(i*j)}</td>)\n        } \n      }\n      //Create the parent and add the children\n      table.push(<tr key={i}>{children}</tr>)\n    }\n    return table\n  }\n  \n  playNoteButton = (offset) => {\n    return(\n        <button className=\"button\" onMouseEnter={() => this.playNote(offset)}>\n        \n        </button>\n    );\n  }\n\n  playNote(offset) {\n    offset = offset * .50;\n    if(offset !== 0){\n      this.synth.triggerAttackRelease([this.noteOne + offset, this.noteTwo + offset, this.noteThree + offset], 1);\n    }else{\n      this.synth.triggerAttackRelease([this.noteOne, this.noteTwo, this.noteThree], 1);\n    }  \n  }\n  \n  createPitchUpButton = () => {\n    return(\n        <button onMouseEnter={this.handleUp}>\n          up\n        </button>\n    );\n  }\n\n  createPitchDownButton = () => {\n    return(\n        <button onMouseEnter={this.handleDown}>\n          down\n        </button>\n    );\n  }\n\n  render() {\n    \n    return (\n      <div>\n        <table>\n          <tbody>\n            {this.createTable()}\n          </tbody>\n        </table>\n      </div>\n      \n    );\n  }\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"));","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}